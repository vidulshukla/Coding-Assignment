#include <stdio.h>
#include<stdlib.h>
struct node
{
  int data;
  struct node *link;
};
struct node *start = NULL;
void
create ()
{
  int num;
  struct node *nn, *ln;
  printf ("enter -1 to stop");
  printf ("\nenter data:");
  scanf ("%d", &num);
  while (num != -1)
    {
      nn = (struct node *) malloc (sizeof (struct node));
      nn->data = num;
      nn->link = NULL;
      if (start == NULL)
	{
	  start = nn;
	}
      else
	{
	  ln = start;
	  while (ln->link != NULL)
	    {
	      ln = ln->link;
	    }
	  ln->link = nn;
	}
      printf ("enter data:");
      scanf ("%d", &num);
    }
}

void
display ()
{
  struct node *p;
  if (start == NULL)
    printf ("empty list");
  else
    {
      p = start;
      while (p != NULL)
	{
	  printf ("%d->", p->data);
	  p = p->link;
	}
      printf ("NULL");
    }
}

void insert_start()
{
    int n;
    printf("enter the data to be inserted:");
    scanf("%d",&n);
    struct node *nn;
    nn=(struct node*)malloc(sizeof(struct node));
    nn->data=n;
    nn->link=start;
    start=nn;
}

void insert_end()
{
    int n;
    printf("enter the data to be inserted:");
    scanf("%d",&n);
    struct node *nn,*p;
    nn=(struct node*)malloc(sizeof(struct node));
    nn->data=n;
    nn->link=NULL;
    p=start;
    while(p->link!=NULL)
    {
        p=p->link;
    }
    p->link=nn;
}

void insert_mid()
{
    int n,pos,i;
    printf("enter the data to be inserted:");
    scanf("%d",&n);
    printf("enter the position to insert data:");
    scanf("%d",&pos);
    struct node *nn,*p;
    nn=(struct node*)malloc(sizeof(struct node));
    nn->data=n;
    nn->link=NULL;
    p=start;
    for(i=2;i<=(pos-1);i++)
    {
        p=p->link;
        if(p==NULL)
            break;
    }
    if(p!=NULL)
    {
        nn->link=p->link;
        p->link=nn;
    }
    else
        printf("\nIt is not possible to insert at the given position");
    
}

void delete_key()
{
    int key;
    printf("\nEnter the element to delete:");
    scanf("%d",&key);
    struct node *p,*q;
    while(start!=NULL && start->data==key)
    {
        p=start;
        start=start->link;
        free(p);
    }
    p=start;
    q=NULL;
    while(p!=NULL)
    {
        if(p->data==key)
        {
            if(q!=NULL)
                q->link=p->link;
            
            free(p);
            p=q->link;
        }
        else
        {
            q=p;
            p=p->link;
        }
    }
}

int main ()
{
    int ch;
    clrscr ();
    create ();
    printf ("the list is:");
    display ();
    do
    {
        printf("\n1.Insert at the beginning\n2.Insert at the end\n3.Insert in the middle\n4.Delete an element from the list\n5.Exit\n");
        printf("enter your choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: insert_start();
                    printf("updated list is:");
                    display();
                    break;
            case 2: insert_end();
                    printf("updated list is:");
                    display();
                    break;
            case 3: insert_mid();
                    printf("updated list is:");
                    display();
                    break;
            case 4: delete_key();
                    printf("updated list is:");
                    display();
                    break;
            case 5: exit(0);
        }
        printf("\npress 1 to continue or 0 to exit");
        scanf("%d",&ch);
    }while(ch==1);
      
    return 0;
}
